// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package usecases is a generated GoMock package.
package usecases

import (
	entities "auth/internal/entities"
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSignInUserRepository is a mock of SignInUserRepository interface.
type MockSignInUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSignInUserRepositoryMockRecorder
}

// MockSignInUserRepositoryMockRecorder is the mock recorder for MockSignInUserRepository.
type MockSignInUserRepositoryMockRecorder struct {
	mock *MockSignInUserRepository
}

// NewMockSignInUserRepository creates a new mock instance.
func NewMockSignInUserRepository(ctrl *gomock.Controller) *MockSignInUserRepository {
	mock := &MockSignInUserRepository{ctrl: ctrl}
	mock.recorder = &MockSignInUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInUserRepository) EXPECT() *MockSignInUserRepositoryMockRecorder {
	return m.recorder
}

// SelectByEmail mocks base method.
func (m *MockSignInUserRepository) SelectByEmail(arg0 context.Context, arg1 entities.Email) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByEmail", arg0, arg1)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByEmail indicates an expected call of SelectByEmail.
func (mr *MockSignInUserRepositoryMockRecorder) SelectByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByEmail", reflect.TypeOf((*MockSignInUserRepository)(nil).SelectByEmail), arg0, arg1)
}

// MockSignInSessionRepository is a mock of SignInSessionRepository interface.
type MockSignInSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSignInSessionRepositoryMockRecorder
}

// MockSignInSessionRepositoryMockRecorder is the mock recorder for MockSignInSessionRepository.
type MockSignInSessionRepositoryMockRecorder struct {
	mock *MockSignInSessionRepository
}

// NewMockSignInSessionRepository creates a new mock instance.
func NewMockSignInSessionRepository(ctrl *gomock.Controller) *MockSignInSessionRepository {
	mock := &MockSignInSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSignInSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInSessionRepository) EXPECT() *MockSignInSessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteByUserId mocks base method.
func (m *MockSignInSessionRepository) DeleteByUserId(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserId indicates an expected call of DeleteByUserId.
func (mr *MockSignInSessionRepositoryMockRecorder) DeleteByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserId", reflect.TypeOf((*MockSignInSessionRepository)(nil).DeleteByUserId), arg0, arg1)
}

// Insert mocks base method.
func (m *MockSignInSessionRepository) Insert(arg0 context.Context, arg1 entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSignInSessionRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSignInSessionRepository)(nil).Insert), arg0, arg1)
}

// MockSignInHashService is a mock of SignInHashService interface.
type MockSignInHashService struct {
	ctrl     *gomock.Controller
	recorder *MockSignInHashServiceMockRecorder
}

// MockSignInHashServiceMockRecorder is the mock recorder for MockSignInHashService.
type MockSignInHashServiceMockRecorder struct {
	mock *MockSignInHashService
}

// NewMockSignInHashService creates a new mock instance.
func NewMockSignInHashService(ctrl *gomock.Controller) *MockSignInHashService {
	mock := &MockSignInHashService{ctrl: ctrl}
	mock.recorder = &MockSignInHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInHashService) EXPECT() *MockSignInHashServiceMockRecorder {
	return m.recorder
}

// CompareStringAndHash mocks base method.
func (m *MockSignInHashService) CompareStringAndHash(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareStringAndHash", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareStringAndHash indicates an expected call of CompareStringAndHash.
func (mr *MockSignInHashServiceMockRecorder) CompareStringAndHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareStringAndHash", reflect.TypeOf((*MockSignInHashService)(nil).CompareStringAndHash), arg0, arg1)
}

// GenerateHash mocks base method.
func (m *MockSignInHashService) GenerateHash(stringToHash string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHash", stringToHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHash indicates an expected call of GenerateHash.
func (mr *MockSignInHashServiceMockRecorder) GenerateHash(stringToHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHash", reflect.TypeOf((*MockSignInHashService)(nil).GenerateHash), stringToHash)
}

// MockSignInSessionService is a mock of SignInSessionService interface.
type MockSignInSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSignInSessionServiceMockRecorder
}

// MockSignInSessionServiceMockRecorder is the mock recorder for MockSignInSessionService.
type MockSignInSessionServiceMockRecorder struct {
	mock *MockSignInSessionService
}

// NewMockSignInSessionService creates a new mock instance.
func NewMockSignInSessionService(ctrl *gomock.Controller) *MockSignInSessionService {
	mock := &MockSignInSessionService{ctrl: ctrl}
	mock.recorder = &MockSignInSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInSessionService) EXPECT() *MockSignInSessionServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSignInSessionService) CreateSession(account entities.User) (entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", account)
	ret0, _ := ret[0].(entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSignInSessionServiceMockRecorder) CreateSession(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSignInSessionService)(nil).CreateSession), account)
}

// MockSignInCookieService is a mock of SignInCookieService interface.
type MockSignInCookieService struct {
	ctrl     *gomock.Controller
	recorder *MockSignInCookieServiceMockRecorder
}

// MockSignInCookieServiceMockRecorder is the mock recorder for MockSignInCookieService.
type MockSignInCookieServiceMockRecorder struct {
	mock *MockSignInCookieService
}

// NewMockSignInCookieService creates a new mock instance.
func NewMockSignInCookieService(ctrl *gomock.Controller) *MockSignInCookieService {
	mock := &MockSignInCookieService{ctrl: ctrl}
	mock.recorder = &MockSignInCookieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInCookieService) EXPECT() *MockSignInCookieServiceMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockSignInCookieService) Set(w http.ResponseWriter, name, value string, expires time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", w, name, value, expires)
}

// Set indicates an expected call of Set.
func (mr *MockSignInCookieServiceMockRecorder) Set(w, name, value, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSignInCookieService)(nil).Set), w, name, value, expires)
}

// MockSignUpUserRepository is a mock of SignUpUserRepository interface.
type MockSignUpUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpUserRepositoryMockRecorder
}

// MockSignUpUserRepositoryMockRecorder is the mock recorder for MockSignUpUserRepository.
type MockSignUpUserRepositoryMockRecorder struct {
	mock *MockSignUpUserRepository
}

// NewMockSignUpUserRepository creates a new mock instance.
func NewMockSignUpUserRepository(ctrl *gomock.Controller) *MockSignUpUserRepository {
	mock := &MockSignUpUserRepository{ctrl: ctrl}
	mock.recorder = &MockSignUpUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpUserRepository) EXPECT() *MockSignUpUserRepositoryMockRecorder {
	return m.recorder
}

// CheckEmailExists mocks base method.
func (m *MockSignUpUserRepository) CheckEmailExists(arg0 context.Context, arg1 entities.Email) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailExists indicates an expected call of CheckEmailExists.
func (mr *MockSignUpUserRepositoryMockRecorder) CheckEmailExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailExists", reflect.TypeOf((*MockSignUpUserRepository)(nil).CheckEmailExists), arg0, arg1)
}

// Insert mocks base method.
func (m *MockSignUpUserRepository) Insert(arg0 context.Context, arg1 entities.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockSignUpUserRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSignUpUserRepository)(nil).Insert), arg0, arg1)
}

// MockSignUpSessionRepository is a mock of SignUpSessionRepository interface.
type MockSignUpSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpSessionRepositoryMockRecorder
}

// MockSignUpSessionRepositoryMockRecorder is the mock recorder for MockSignUpSessionRepository.
type MockSignUpSessionRepositoryMockRecorder struct {
	mock *MockSignUpSessionRepository
}

// NewMockSignUpSessionRepository creates a new mock instance.
func NewMockSignUpSessionRepository(ctrl *gomock.Controller) *MockSignUpSessionRepository {
	mock := &MockSignUpSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSignUpSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpSessionRepository) EXPECT() *MockSignUpSessionRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSignUpSessionRepository) Insert(arg0 context.Context, arg1 entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSignUpSessionRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSignUpSessionRepository)(nil).Insert), arg0, arg1)
}

// MockSignUpSessionService is a mock of SignUpSessionService interface.
type MockSignUpSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpSessionServiceMockRecorder
}

// MockSignUpSessionServiceMockRecorder is the mock recorder for MockSignUpSessionService.
type MockSignUpSessionServiceMockRecorder struct {
	mock *MockSignUpSessionService
}

// NewMockSignUpSessionService creates a new mock instance.
func NewMockSignUpSessionService(ctrl *gomock.Controller) *MockSignUpSessionService {
	mock := &MockSignUpSessionService{ctrl: ctrl}
	mock.recorder = &MockSignUpSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpSessionService) EXPECT() *MockSignUpSessionServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSignUpSessionService) CreateSession(user entities.User) (entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", user)
	ret0, _ := ret[0].(entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSignUpSessionServiceMockRecorder) CreateSession(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSignUpSessionService)(nil).CreateSession), user)
}

// MockSignUpHashService is a mock of SignUpHashService interface.
type MockSignUpHashService struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpHashServiceMockRecorder
}

// MockSignUpHashServiceMockRecorder is the mock recorder for MockSignUpHashService.
type MockSignUpHashServiceMockRecorder struct {
	mock *MockSignUpHashService
}

// NewMockSignUpHashService creates a new mock instance.
func NewMockSignUpHashService(ctrl *gomock.Controller) *MockSignUpHashService {
	mock := &MockSignUpHashService{ctrl: ctrl}
	mock.recorder = &MockSignUpHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpHashService) EXPECT() *MockSignUpHashServiceMockRecorder {
	return m.recorder
}

// GenerateHash mocks base method.
func (m *MockSignUpHashService) GenerateHash(stringToHash string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHash", stringToHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHash indicates an expected call of GenerateHash.
func (mr *MockSignUpHashServiceMockRecorder) GenerateHash(stringToHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHash", reflect.TypeOf((*MockSignUpHashService)(nil).GenerateHash), stringToHash)
}

// MockSignUpCookieService is a mock of SignUpCookieService interface.
type MockSignUpCookieService struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpCookieServiceMockRecorder
}

// MockSignUpCookieServiceMockRecorder is the mock recorder for MockSignUpCookieService.
type MockSignUpCookieServiceMockRecorder struct {
	mock *MockSignUpCookieService
}

// NewMockSignUpCookieService creates a new mock instance.
func NewMockSignUpCookieService(ctrl *gomock.Controller) *MockSignUpCookieService {
	mock := &MockSignUpCookieService{ctrl: ctrl}
	mock.recorder = &MockSignUpCookieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpCookieService) EXPECT() *MockSignUpCookieServiceMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockSignUpCookieService) Set(w http.ResponseWriter, name, value string, expires time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", w, name, value, expires)
}

// Set indicates an expected call of Set.
func (mr *MockSignUpCookieServiceMockRecorder) Set(w, name, value, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSignUpCookieService)(nil).Set), w, name, value, expires)
}

// MockGenerateTokensUserRepository is a mock of GenerateTokensUserRepository interface.
type MockGenerateTokensUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenerateTokensUserRepositoryMockRecorder
}

// MockGenerateTokensUserRepositoryMockRecorder is the mock recorder for MockGenerateTokensUserRepository.
type MockGenerateTokensUserRepositoryMockRecorder struct {
	mock *MockGenerateTokensUserRepository
}

// NewMockGenerateTokensUserRepository creates a new mock instance.
func NewMockGenerateTokensUserRepository(ctrl *gomock.Controller) *MockGenerateTokensUserRepository {
	mock := &MockGenerateTokensUserRepository{ctrl: ctrl}
	mock.recorder = &MockGenerateTokensUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerateTokensUserRepository) EXPECT() *MockGenerateTokensUserRepositoryMockRecorder {
	return m.recorder
}

// SelectByUserId mocks base method.
func (m *MockGenerateTokensUserRepository) SelectByUserId(arg0 context.Context, arg1 string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByUserId", arg0, arg1)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByUserId indicates an expected call of SelectByUserId.
func (mr *MockGenerateTokensUserRepositoryMockRecorder) SelectByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserId", reflect.TypeOf((*MockGenerateTokensUserRepository)(nil).SelectByUserId), arg0, arg1)
}

// MockGenerateTokensSessionRepository is a mock of GenerateTokensSessionRepository interface.
type MockGenerateTokensSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenerateTokensSessionRepositoryMockRecorder
}

// MockGenerateTokensSessionRepositoryMockRecorder is the mock recorder for MockGenerateTokensSessionRepository.
type MockGenerateTokensSessionRepositoryMockRecorder struct {
	mock *MockGenerateTokensSessionRepository
}

// NewMockGenerateTokensSessionRepository creates a new mock instance.
func NewMockGenerateTokensSessionRepository(ctrl *gomock.Controller) *MockGenerateTokensSessionRepository {
	mock := &MockGenerateTokensSessionRepository{ctrl: ctrl}
	mock.recorder = &MockGenerateTokensSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerateTokensSessionRepository) EXPECT() *MockGenerateTokensSessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteByUserId mocks base method.
func (m *MockGenerateTokensSessionRepository) DeleteByUserId(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserId indicates an expected call of DeleteByUserId.
func (mr *MockGenerateTokensSessionRepositoryMockRecorder) DeleteByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserId", reflect.TypeOf((*MockGenerateTokensSessionRepository)(nil).DeleteByUserId), arg0, arg1)
}

// Insert mocks base method.
func (m *MockGenerateTokensSessionRepository) Insert(arg0 context.Context, arg1 entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockGenerateTokensSessionRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGenerateTokensSessionRepository)(nil).Insert), arg0, arg1)
}

// MockGenerateTokensHashService is a mock of GenerateTokensHashService interface.
type MockGenerateTokensHashService struct {
	ctrl     *gomock.Controller
	recorder *MockGenerateTokensHashServiceMockRecorder
}

// MockGenerateTokensHashServiceMockRecorder is the mock recorder for MockGenerateTokensHashService.
type MockGenerateTokensHashServiceMockRecorder struct {
	mock *MockGenerateTokensHashService
}

// NewMockGenerateTokensHashService creates a new mock instance.
func NewMockGenerateTokensHashService(ctrl *gomock.Controller) *MockGenerateTokensHashService {
	mock := &MockGenerateTokensHashService{ctrl: ctrl}
	mock.recorder = &MockGenerateTokensHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerateTokensHashService) EXPECT() *MockGenerateTokensHashServiceMockRecorder {
	return m.recorder
}

// GenerateHash mocks base method.
func (m *MockGenerateTokensHashService) GenerateHash(stringToHash string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHash", stringToHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHash indicates an expected call of GenerateHash.
func (mr *MockGenerateTokensHashServiceMockRecorder) GenerateHash(stringToHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHash", reflect.TypeOf((*MockGenerateTokensHashService)(nil).GenerateHash), stringToHash)
}

// MockGenerateTokensCookieService is a mock of GenerateTokensCookieService interface.
type MockGenerateTokensCookieService struct {
	ctrl     *gomock.Controller
	recorder *MockGenerateTokensCookieServiceMockRecorder
}

// MockGenerateTokensCookieServiceMockRecorder is the mock recorder for MockGenerateTokensCookieService.
type MockGenerateTokensCookieServiceMockRecorder struct {
	mock *MockGenerateTokensCookieService
}

// NewMockGenerateTokensCookieService creates a new mock instance.
func NewMockGenerateTokensCookieService(ctrl *gomock.Controller) *MockGenerateTokensCookieService {
	mock := &MockGenerateTokensCookieService{ctrl: ctrl}
	mock.recorder = &MockGenerateTokensCookieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerateTokensCookieService) EXPECT() *MockGenerateTokensCookieServiceMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockGenerateTokensCookieService) Set(w http.ResponseWriter, name, value string, expires time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", w, name, value, expires)
}

// Set indicates an expected call of Set.
func (mr *MockGenerateTokensCookieServiceMockRecorder) Set(w, name, value, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGenerateTokensCookieService)(nil).Set), w, name, value, expires)
}

// MockGenerateTokensSessionService is a mock of GenerateTokensSessionService interface.
type MockGenerateTokensSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockGenerateTokensSessionServiceMockRecorder
}

// MockGenerateTokensSessionServiceMockRecorder is the mock recorder for MockGenerateTokensSessionService.
type MockGenerateTokensSessionServiceMockRecorder struct {
	mock *MockGenerateTokensSessionService
}

// NewMockGenerateTokensSessionService creates a new mock instance.
func NewMockGenerateTokensSessionService(ctrl *gomock.Controller) *MockGenerateTokensSessionService {
	mock := &MockGenerateTokensSessionService{ctrl: ctrl}
	mock.recorder = &MockGenerateTokensSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerateTokensSessionService) EXPECT() *MockGenerateTokensSessionServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockGenerateTokensSessionService) CreateSession(account entities.User) (entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", account)
	ret0, _ := ret[0].(entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockGenerateTokensSessionServiceMockRecorder) CreateSession(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockGenerateTokensSessionService)(nil).CreateSession), account)
}

// MockRefreshSessionUserRepository is a mock of RefreshSessionUserRepository interface.
type MockRefreshSessionUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshSessionUserRepositoryMockRecorder
}

// MockRefreshSessionUserRepositoryMockRecorder is the mock recorder for MockRefreshSessionUserRepository.
type MockRefreshSessionUserRepositoryMockRecorder struct {
	mock *MockRefreshSessionUserRepository
}

// NewMockRefreshSessionUserRepository creates a new mock instance.
func NewMockRefreshSessionUserRepository(ctrl *gomock.Controller) *MockRefreshSessionUserRepository {
	mock := &MockRefreshSessionUserRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshSessionUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshSessionUserRepository) EXPECT() *MockRefreshSessionUserRepositoryMockRecorder {
	return m.recorder
}

// SelectByUserId mocks base method.
func (m *MockRefreshSessionUserRepository) SelectByUserId(arg0 context.Context, arg1 string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByUserId", arg0, arg1)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByUserId indicates an expected call of SelectByUserId.
func (mr *MockRefreshSessionUserRepositoryMockRecorder) SelectByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserId", reflect.TypeOf((*MockRefreshSessionUserRepository)(nil).SelectByUserId), arg0, arg1)
}

// MockRefreshSessionSessionRepository is a mock of RefreshSessionSessionRepository interface.
type MockRefreshSessionSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshSessionSessionRepositoryMockRecorder
}

// MockRefreshSessionSessionRepositoryMockRecorder is the mock recorder for MockRefreshSessionSessionRepository.
type MockRefreshSessionSessionRepositoryMockRecorder struct {
	mock *MockRefreshSessionSessionRepository
}

// NewMockRefreshSessionSessionRepository creates a new mock instance.
func NewMockRefreshSessionSessionRepository(ctrl *gomock.Controller) *MockRefreshSessionSessionRepository {
	mock := &MockRefreshSessionSessionRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshSessionSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshSessionSessionRepository) EXPECT() *MockRefreshSessionSessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteByUserId mocks base method.
func (m *MockRefreshSessionSessionRepository) DeleteByUserId(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserId indicates an expected call of DeleteByUserId.
func (mr *MockRefreshSessionSessionRepositoryMockRecorder) DeleteByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserId", reflect.TypeOf((*MockRefreshSessionSessionRepository)(nil).DeleteByUserId), arg0, arg1)
}

// SelectByUserId mocks base method.
func (m *MockRefreshSessionSessionRepository) SelectByUserId(arg0 context.Context, arg1 string) (entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByUserId", arg0, arg1)
	ret0, _ := ret[0].(entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByUserId indicates an expected call of SelectByUserId.
func (mr *MockRefreshSessionSessionRepositoryMockRecorder) SelectByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserId", reflect.TypeOf((*MockRefreshSessionSessionRepository)(nil).SelectByUserId), arg0, arg1)
}

// Update mocks base method.
func (m *MockRefreshSessionSessionRepository) Update(context context.Context, session entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", context, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRefreshSessionSessionRepositoryMockRecorder) Update(context, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRefreshSessionSessionRepository)(nil).Update), context, session)
}

// MockRefreshSessionSessionService is a mock of RefreshSessionSessionService interface.
type MockRefreshSessionSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshSessionSessionServiceMockRecorder
}

// MockRefreshSessionSessionServiceMockRecorder is the mock recorder for MockRefreshSessionSessionService.
type MockRefreshSessionSessionServiceMockRecorder struct {
	mock *MockRefreshSessionSessionService
}

// NewMockRefreshSessionSessionService creates a new mock instance.
func NewMockRefreshSessionSessionService(ctrl *gomock.Controller) *MockRefreshSessionSessionService {
	mock := &MockRefreshSessionSessionService{ctrl: ctrl}
	mock.recorder = &MockRefreshSessionSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshSessionSessionService) EXPECT() *MockRefreshSessionSessionServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockRefreshSessionSessionService) CreateSession(account entities.User) (entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", account)
	ret0, _ := ret[0].(entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRefreshSessionSessionServiceMockRecorder) CreateSession(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRefreshSessionSessionService)(nil).CreateSession), account)
}

// ParseToken mocks base method.
func (m *MockRefreshSessionSessionService) ParseToken(token string) (entities.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(entities.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockRefreshSessionSessionServiceMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockRefreshSessionSessionService)(nil).ParseToken), token)
}

// MockRefreshSessionCookieService is a mock of RefreshSessionCookieService interface.
type MockRefreshSessionCookieService struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshSessionCookieServiceMockRecorder
}

// MockRefreshSessionCookieServiceMockRecorder is the mock recorder for MockRefreshSessionCookieService.
type MockRefreshSessionCookieServiceMockRecorder struct {
	mock *MockRefreshSessionCookieService
}

// NewMockRefreshSessionCookieService creates a new mock instance.
func NewMockRefreshSessionCookieService(ctrl *gomock.Controller) *MockRefreshSessionCookieService {
	mock := &MockRefreshSessionCookieService{ctrl: ctrl}
	mock.recorder = &MockRefreshSessionCookieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshSessionCookieService) EXPECT() *MockRefreshSessionCookieServiceMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockRefreshSessionCookieService) Clear(w http.ResponseWriter, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", w, name)
}

// Clear indicates an expected call of Clear.
func (mr *MockRefreshSessionCookieServiceMockRecorder) Clear(w, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRefreshSessionCookieService)(nil).Clear), w, name)
}

// Set mocks base method.
func (m *MockRefreshSessionCookieService) Set(w http.ResponseWriter, name, value string, expires time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", w, name, value, expires)
}

// Set indicates an expected call of Set.
func (mr *MockRefreshSessionCookieServiceMockRecorder) Set(w, name, value, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRefreshSessionCookieService)(nil).Set), w, name, value, expires)
}

// MockRefreshSessionHashProvider is a mock of RefreshSessionHashProvider interface.
type MockRefreshSessionHashProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshSessionHashProviderMockRecorder
}

// MockRefreshSessionHashProviderMockRecorder is the mock recorder for MockRefreshSessionHashProvider.
type MockRefreshSessionHashProviderMockRecorder struct {
	mock *MockRefreshSessionHashProvider
}

// NewMockRefreshSessionHashProvider creates a new mock instance.
func NewMockRefreshSessionHashProvider(ctrl *gomock.Controller) *MockRefreshSessionHashProvider {
	mock := &MockRefreshSessionHashProvider{ctrl: ctrl}
	mock.recorder = &MockRefreshSessionHashProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshSessionHashProvider) EXPECT() *MockRefreshSessionHashProviderMockRecorder {
	return m.recorder
}

// CompareStringAndHash mocks base method.
func (m *MockRefreshSessionHashProvider) CompareStringAndHash(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareStringAndHash", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareStringAndHash indicates an expected call of CompareStringAndHash.
func (mr *MockRefreshSessionHashProviderMockRecorder) CompareStringAndHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareStringAndHash", reflect.TypeOf((*MockRefreshSessionHashProvider)(nil).CompareStringAndHash), arg0, arg1)
}

// GenerateHash mocks base method.
func (m *MockRefreshSessionHashProvider) GenerateHash(stringToHash string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHash", stringToHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHash indicates an expected call of GenerateHash.
func (mr *MockRefreshSessionHashProviderMockRecorder) GenerateHash(stringToHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHash", reflect.TypeOf((*MockRefreshSessionHashProvider)(nil).GenerateHash), stringToHash)
}

// MockGetUserUserRepository is a mock of GetUserUserRepository interface.
type MockGetUserUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserUserRepositoryMockRecorder
}

// MockGetUserUserRepositoryMockRecorder is the mock recorder for MockGetUserUserRepository.
type MockGetUserUserRepositoryMockRecorder struct {
	mock *MockGetUserUserRepository
}

// NewMockGetUserUserRepository creates a new mock instance.
func NewMockGetUserUserRepository(ctrl *gomock.Controller) *MockGetUserUserRepository {
	mock := &MockGetUserUserRepository{ctrl: ctrl}
	mock.recorder = &MockGetUserUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserUserRepository) EXPECT() *MockGetUserUserRepositoryMockRecorder {
	return m.recorder
}

// SelectByUserId mocks base method.
func (m *MockGetUserUserRepository) SelectByUserId(arg0 context.Context, arg1 string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByUserId", arg0, arg1)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByUserId indicates an expected call of SelectByUserId.
func (mr *MockGetUserUserRepositoryMockRecorder) SelectByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserId", reflect.TypeOf((*MockGetUserUserRepository)(nil).SelectByUserId), arg0, arg1)
}

// MockLogoutSessionRepository is a mock of LogoutSessionRepository interface.
type MockLogoutSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogoutSessionRepositoryMockRecorder
}

// MockLogoutSessionRepositoryMockRecorder is the mock recorder for MockLogoutSessionRepository.
type MockLogoutSessionRepositoryMockRecorder struct {
	mock *MockLogoutSessionRepository
}

// NewMockLogoutSessionRepository creates a new mock instance.
func NewMockLogoutSessionRepository(ctrl *gomock.Controller) *MockLogoutSessionRepository {
	mock := &MockLogoutSessionRepository{ctrl: ctrl}
	mock.recorder = &MockLogoutSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogoutSessionRepository) EXPECT() *MockLogoutSessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteByUserId mocks base method.
func (m *MockLogoutSessionRepository) DeleteByUserId(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserId indicates an expected call of DeleteByUserId.
func (mr *MockLogoutSessionRepositoryMockRecorder) DeleteByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserId", reflect.TypeOf((*MockLogoutSessionRepository)(nil).DeleteByUserId), arg0, arg1)
}

// MockLogoutCookieService is a mock of LogoutCookieService interface.
type MockLogoutCookieService struct {
	ctrl     *gomock.Controller
	recorder *MockLogoutCookieServiceMockRecorder
}

// MockLogoutCookieServiceMockRecorder is the mock recorder for MockLogoutCookieService.
type MockLogoutCookieServiceMockRecorder struct {
	mock *MockLogoutCookieService
}

// NewMockLogoutCookieService creates a new mock instance.
func NewMockLogoutCookieService(ctrl *gomock.Controller) *MockLogoutCookieService {
	mock := &MockLogoutCookieService{ctrl: ctrl}
	mock.recorder = &MockLogoutCookieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogoutCookieService) EXPECT() *MockLogoutCookieServiceMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockLogoutCookieService) Clear(w http.ResponseWriter, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", w, name)
}

// Clear indicates an expected call of Clear.
func (mr *MockLogoutCookieServiceMockRecorder) Clear(w, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockLogoutCookieService)(nil).Clear), w, name)
}

// MockLogoutSessionService is a mock of LogoutSessionService interface.
type MockLogoutSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockLogoutSessionServiceMockRecorder
}

// MockLogoutSessionServiceMockRecorder is the mock recorder for MockLogoutSessionService.
type MockLogoutSessionServiceMockRecorder struct {
	mock *MockLogoutSessionService
}

// NewMockLogoutSessionService creates a new mock instance.
func NewMockLogoutSessionService(ctrl *gomock.Controller) *MockLogoutSessionService {
	mock := &MockLogoutSessionService{ctrl: ctrl}
	mock.recorder = &MockLogoutSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogoutSessionService) EXPECT() *MockLogoutSessionServiceMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockLogoutSessionService) ParseToken(token string) (entities.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(entities.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockLogoutSessionServiceMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockLogoutSessionService)(nil).ParseToken), token)
}
